# This script will trigger on every new yaml file added to configs/ and deploy a new terraform project

name: Auto Generate Terraform Project

on:
  push:
    paths:
      - "configs/*.yaml"
  
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    env:
      GH_OWNER: sherifemad53
      TF_STATE_BUCKET: my-terraform-states
      # AWS_REGION: us-east-1

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Setup Python and Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
        
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      # - name: Set up GitHub CLI
      #   run: |
      #     sudo apt update
      #     sudo apt install gh -y

      - name: changing defualt branch naming to main
        run: |
          git config --global init.defaultBranch main

      # - name: Authenticate GitHub CLI
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #   run: |
      #     echo $GITHUB_TOKEN | gh auth login --with-token

      - name: Install dependencies
        run: pip install pyyaml

      - name: Find project YAML file
        id: project
        run: |
          FILE=$(ls configs/*.yaml | head -n 1)
          NAME=$(basename "$FILE" .yaml)
          echo "project_name=$NAME" >> $GITHUB_OUTPUT

      - name: Generate Terraform project
        run: python3 scripts/deploy.py configs/${{ steps.project.outputs.project_name }}.yaml


      - name: List generated files
        run: ls -la ${{ steps.project.outputs.project_name }}

      - name: Check if GitHub repo exists
        id: repo_check
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          REPO="${{ env.GH_OWNER }}/${{ steps.project.outputs.project_name }}"
          
          if gh api "repos/$REPO" &>/dev/null; then
            echo "âœ… Repo '$REPO' exists."
          else
            echo "ðŸš€ Creating repo '$REPO_NAME'..."
            gh repo create $REPO --public --description "Auto-generated Terraform project" --confirm
          fi



      # - name: Create repo if missing
      #   if: steps.repo_check.outputs.status != '200'
      #   env:
      #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
      #   run: |
      #     echo "Creating new repo: ${{ steps.project.outputs.project_name }}"
      #     curl -s -X POST -H "Authorization: token $GH_TOKEN" \
      #       -d '{"name":"${{ steps.project.outputs.project_name }}","private":true}' \
      #       https://api.github.com/orgs/${{ env.GH_OWNER }}/repos

      - name: Push generated Terraform to target repo
        run: |
          cd ${{ steps.project.outputs.project_name }}
          git init
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          hit remote add origin https://github.com/${{ github.repository_owner }}/${{ steps.create_repo.outputs.project_name }}.git
          git add .
          git commit -m "Auto-generated Terraform project"
          git branch -M main
          git push -f origin main


      # - name: Create new repository
      #   id: create_repo
      #   run: |
      #     PROJECT_NAME=$(basename ${{ github.event.inputs.config_file }} .yaml)
      #     TIMESTAMP=$(date +%s)
      #     NEW_REPO_NAME="${PROJECT_NAME}-${TIMESTAMP}"
      #     echo "Repository Name: $NEW_REPO_NAME"
      #     gh repo create $NEW_REPO_NAME --public --description "Auto-generated Terraform project" --confirm
      #     echo "repo_name=$NEW_REPO_NAME" >> $GITHUB_OUTPUT

      # - name: Push generated project to new repo
      #   run: |
      #     PROJECT_DIR=$(basename ${{ github.event.inputs.config_file }} .yaml)
      #     cd $PROJECT_DIR
      #     git init
      #     git branch -M main
      #     git add .
      #     git commit -m "Initial commit"
      #     git remote add origin https://github.com/${{ github.repository_owner }}/${{ steps.create_repo.outputs.repo_name }}.git
      #     git push -u origin main

      # - name: Terraform Init
      #   run: |
      #     cd $(basename ${{ github.event.inputs.config_file }} .yaml)
      #     terraform init \
      #       -backend-config="bucket=central-tf-states" \
      #       -backend-config="region=us-east-1" \
      #       -backend-config="key=$(basename ${{ github.event.inputs.config_file }} .yaml)/terraform.tfstate" \
      #       -backend-config="dynamodb_table=tf-locks"

      # - name: Terraform Plan
      #   run: |
      #     cd $(basename ${{ github.event.inputs.config_file }} .yaml)
      #     terraform plan

      # - name: Terraform Apply
      #   run: |
      #     cd $(basename ${{ github.event.inputs.config_file }} .yaml)
      #     terraform apply -auto-approve




      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Initialize Terraform with AWS S3 backend
      #   working-directory: ${{ steps.project.outputs.project_name }}
      #   run: |
      #     terraform init \
      #       -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
      #       -backend-config="key=${{ steps.project.outputs.project_name }}/terraform.tfstate" \
      #       -backend-config="region=${{ env.AWS_REGION }}" \
      #       -backend-config="encrypt=true"
